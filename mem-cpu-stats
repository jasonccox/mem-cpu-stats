#!/usr/bin/env bash
#
# mem-cpu-stats - Print a brief summary of memory and CPU usage at a regular
# interval.
#
# Created by Jason Cox
# github.com/jasonccox/mem-cpu-stats
#

MEM_WIDTH=4
CPU_WIDTH=4
INTERVAL=5

main() {
    OS="$(get_os)"
    while true; do
        stats="$(get_stats)"

        total_mem="$(echo "$stats" | awk '{print $1}')"
        used_mem="$(echo "$stats" | awk '{print $2}')"
        cpu_percent="$(echo "$stats" | awk '{print $3}')"

        used_mem_gb="$(echo "scale=1; $used_mem / 1024" | bc)"
        mem_percent="$(echo "scale=1; $used_mem * 100 / $total_mem" | bc)"

        used_mem_fmt="$(printf '%*.1f' $MEM_WIDTH $used_mem_gb)"
        cpu_percent_fmt="$(printf '%*.1f' $CPU_WIDTH $cpu_percent)"

        mem_out="${used_mem_fmt}G $(colored_bar $mem_percent)"
        cpu_out="${cpu_percent_fmt}% $(colored_bar $cpu_percent)"

        echo "$mem_out  $cpu_out"

        sleep $(($INTERVAL - 1)) # subtract 1 because top takes 1 second
    done
}

get_os() {
    case "$OSTYPE" in
        linux*) echo linux ;;
        darwin*) echo macos ;;
        *) echo other ;;
    esac
}

get_stats() {
    case "$OS" in
        linux) echo "$(get_stats_linux)" ;;
        macos) echo "$(get_stats_macos)" ;;
        *) echo "" ;;
    esac
}

get_stats_linux() {
    top_out="$(top -b -n 2 -d 1 -w 512)"

    mem_row="$(echo "$top_out" | grep "MiB Mem" | tail -n 1)"
    cpu_row="$(echo "$top_out" | grep "%Cpu(s)" | tail -n 1)"

    total_mem="$(echo "$mem_row" | awk '{print $4}')"
    used_mem="$(echo "$mem_row" | awk '{print $8}')"

    cpu_user="$(echo "$cpu_row" | awk '{print $2}')"
    cpu_sys="$(echo "$cpu_row" | awk '{print $4}')"

    cpu_percent="$(echo "scale=1; $cpu_user + $cpu_sys" | bc)"

    echo "$total_mem $used_mem $cpu_percent"
}

get_stats_macos() {
    top_out="$(top -l 2 -i 1 -n 0)"
    vm_stat_out="$(vm_stat)"

    page_size="$(echo "$vm_stat_out" | grep "page size of" | sed 's/[^0-9]//g')"
    free="$(echo "$vm_stat_out" | grep "Pages free" | sed 's/[^0-9]//g')"
    active="$(echo "$vm_stat_out" | grep "Pages active" | sed 's/[^0-9]//g')"
    inactive="$(echo "$vm_stat_out" | grep "Pages inactive" | sed 's/[^0-9]//g')"
    speculative="$(echo "$vm_stat_out" | grep "Pages speculative" | sed 's/[^0-9]//g')"
    wired="$(echo "$vm_stat_out" | grep "Pages wired down" | sed 's/[^0-9]//g')"
    compressed="$(echo "$vm_stat_out" | grep "Pages occupied by compressor" | sed 's/[^0-9]//g')"

    total_mem=$(echo "scale=1;\
        ($free + $active + $inactive + $speculative + $wired + $compressed) *\
        $page_size / 1024 / 1024" | bc)

    used_mem=$(echo "scale=1;\
        ($active + $wired) * $page_size / 1024 / 1024" | bc)

    cpu_row="$(echo "$top_out" | grep "CPU usage" | tail -n 1)"

    cpu_user="$(echo "$cpu_row" | awk '{print $3}' | sed 's/%//')"
    cpu_sys="$(echo "$cpu_row" | awk '{print $5}' | sed 's/%//')"

    cpu_percent="$(echo "scale=1; $cpu_user + $cpu_sys" | bc)"

    echo "$total_mem $used_mem $cpu_percent"
}

color() {
    if [ "$(echo "$1 <= 50" | bc)" = "1" ] ; then
        echo green
    elif [ "$(echo "$1 <= 75" | bc)" = "1" ] ; then
        echo yellow
    else
        echo red
    fi
}

bar() {
    if [ "$(echo "$1 <= 12.5" | bc)" = "1" ] ; then
        echo ▁
    elif [ "$(echo "$1 <= 25" | bc)" = "1" ] ; then
        echo ▂
    elif [ "$(echo "$1 <= 37.5" | bc)" = "1" ] ; then
        echo ▃
    elif [ "$(echo "$1 <= 50" | bc)" = "1" ] ; then
        echo ▄
    elif [ "$(echo "$1 <= 62.5" | bc)" = "1" ] ; then
        echo ▅
    elif [ "$(echo "$1 <= 75" | bc)" = "1" ] ; then
        echo ▆
    elif [ "$(echo "$1 <= 87.5" | bc)" = "1" ] ; then
        echo ▇
    else
        echo █
    fi
}

colored_bar() {
    c="$(color $1)"
    echo "#[fg="$c",bold]"$(bar $1)"#[fg=default,default]"
}

main

