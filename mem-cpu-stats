#!/bin/bash
#
# mem-cpu-stats - Print a summary of memory and CPU usage at a regular interval.
# Author: Jason Cox
# Repo: https://github.com/jasonccox/mem-cpu-stats

MEM_WIDTH=3
CPU_WIDTH=4
INTERVAL=5
NUM_ITERS=
COLORS=

usage() {
    echo \
"USAGE: mem-cpu-stats [OPTIONS]

Available OPTIONS:
    -c | --colors STYLE        Colorize the bars in STYLE. Currently the only
                               supported style is tmux. Default none.
    -i | --interval INTERVAL   Print output every INTERVAL seconds. INTERVAL
                               must be an integer greater than 0. Default 5.
    -m | --mem-width WIDTH     Display the memory usage number with at least
                               WIDTH characters. Default 3.
    -n | --num-iters NUM       Exit after NUM intervals. An empty value is
                               interpreted as infinity. Default infinity.
    -p | --cpu-width WIDTH     Display the CPU usage number with at least WIDTH
                               characters. Default 4.
"
}

main() {
    OS="$(get_os)"
    if [ "$OS" != linux ] && [ "$OS" != macos ]; then
        echo "unsupported OS"
        exit 1
    fi

    parse_options $@

    n=1
    while true; do
        if [ "$NUM_ITERS" ] && [ "$n" -gt "$NUM_ITERS" ]; then
            break
        fi

        stats="$(get_stats)"

        total_mem="$(echo "$stats" | awk '{print $1}')"
        used_mem="$(echo "$stats" | awk '{print $2}')"
        cpu_percent="$(echo "$stats" | awk '{print $3}')"

        used_mem_gb="$(echo "scale=1; $used_mem / 1024" | bc)"
        mem_percent="$(echo "scale=1; $used_mem * 100 / $total_mem" | bc)"

        used_mem_fmt="$(printf '%*.1f' $MEM_WIDTH $used_mem_gb)"
        cpu_percent_fmt="$(printf '%*.1f' $CPU_WIDTH $cpu_percent)"

        mem_out="${used_mem_fmt}G $(bar $mem_percent)"
        cpu_out="${cpu_percent_fmt}% $(bar $cpu_percent)"

        echo "$mem_out  $cpu_out"

        n="$((n + 1))"
        sleep $(($INTERVAL - 1)) # subtract 1 because top takes 1 second
    done
}

parse_options() {
    while [ "$1" != "" ]; do
        case "$1" in
            -c | --colors ) shift
                            COLORS="$1"
                            ;;
            -i | --interval ) shift
                            INTERVAL="$1"
                            ;;
            -m | --mem-width ) shift
                            MEM_WIDTH="$1"
                            ;;
            -p | --cpu-width ) shift
                            CPU_WIDTH="$1"
                            ;;
            -n | --num-iters ) shift
                            NUM_ITERS="$1"
                            ;;
            * )             usage
                            exit 1
        esac
        shift
    done
}

get_os() {
    case "$OSTYPE" in
        linux*) echo linux ;;
        darwin*) echo macos ;;
        *) echo other ;;
    esac
}

# Based on $OS, output stats as "total_mem used_mem cpu_percent". Memory in MiB.
get_stats() {
    case "$OS" in
        linux) echo "$(get_stats_linux)" ;;
        macos) echo "$(get_stats_macos)" ;;
        *) echo "" ;;
    esac
}

get_stats_linux() {
    top_out="$(top -b -n 2 -d 1 -w 512)"

    mem_row="$(echo "$top_out" | grep "MiB Mem" | tail -n 1)"
    cpu_row="$(echo "$top_out" | grep "%Cpu(s)" | tail -n 1)"

    total_mem="$(echo "$mem_row" | awk '{print $4}')"
    used_mem="$(echo "$mem_row" | awk '{print $8}')"

    cpu_user="$(echo "$cpu_row" | awk '{print $2}')"
    cpu_sys="$(echo "$cpu_row" | awk '{print $4}')"

    cpu_percent="$(echo "scale=1; $cpu_user + $cpu_sys" | bc)"

    echo "$total_mem $used_mem $cpu_percent"
}

get_stats_macos() {
    top_out="$(top -l 2 -i 1 -n 0)"
    vm_stat_out="$(vm_stat)"

    page_size="$(echo "$vm_stat_out" | grep "page size of" | sed 's/[^0-9]//g')"
    free="$(echo "$vm_stat_out" | grep "Pages free" | sed 's/[^0-9]//g')"
    active="$(echo "$vm_stat_out" | grep "Pages active" | sed 's/[^0-9]//g')"
    inactive="$(echo "$vm_stat_out" | grep "Pages inactive" | sed 's/[^0-9]//g')"
    speculative="$(echo "$vm_stat_out" | grep "Pages speculative" | sed 's/[^0-9]//g')"
    wired="$(echo "$vm_stat_out" | grep "Pages wired down" | sed 's/[^0-9]//g')"
    compressed="$(echo "$vm_stat_out" | grep "Pages occupied by compressor" | sed 's/[^0-9]//g')"

    total_mem=$(echo "scale=1;\
        ($free + $active + $inactive + $speculative + $wired + $compressed) *\
        $page_size / 1024 / 1024" | bc)

    used_mem=$(echo "scale=1;\
        ($active + $wired) * $page_size / 1024 / 1024" | bc)

    cpu_row="$(echo "$top_out" | grep "CPU usage" | tail -n 1)"

    cpu_user="$(echo "$cpu_row" | awk '{print $3}' | sed 's/%//')"
    cpu_sys="$(echo "$cpu_row" | awk '{print $5}' | sed 's/%//')"

    cpu_percent="$(echo "scale=1; $cpu_user + $cpu_sys" | bc)"

    echo "$total_mem $used_mem $cpu_percent"
}

# Output a unicode bar representing $1 out of 100. The bar will be colorized
# according to $COLORS.
bar() {
    if [ "$(echo "$1 <= 12.5" | bc)" = "1" ] ; then
        b=▁
    elif [ "$(echo "$1 <= 25" | bc)" = "1" ] ; then
        b=▂
    elif [ "$(echo "$1 <= 37.5" | bc)" = "1" ] ; then
        b=▃
    elif [ "$(echo "$1 <= 50" | bc)" = "1" ] ; then
        b=▄
    elif [ "$(echo "$1 <= 62.5" | bc)" = "1" ] ; then
        b=▅
    elif [ "$(echo "$1 <= 75" | bc)" = "1" ] ; then
        b=▆
    elif [ "$(echo "$1 <= 87.5" | bc)" = "1" ] ; then
        b=▇
    else
        b=█
    fi

    if [ "$COLORS" = tmux ]; then
        echo "$(colorize_tmux $1 $b)"
    else
        echo "$b"
    fi
}

# Wrap $2 in tmux styles, with the color determined by $1 out of 100.
colorize_tmux() {
    if [ "$(echo "$1 <= 50" | bc)" = "1" ] ; then
        color=green
    elif [ "$(echo "$1 <= 75" | bc)" = "1" ] ; then
        color=yellow
    else
        color=red
    fi

    echo "#[fg=$color,bold]$2#[fg=default,default]"
}

main $@

